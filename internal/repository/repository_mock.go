// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTCPClient is a mock of TCPClient interface.
type MockTCPClient struct {
	ctrl     *gomock.Controller
	recorder *MockTCPClientMockRecorder
}

// MockTCPClientMockRecorder is the mock recorder for MockTCPClient.
type MockTCPClientMockRecorder struct {
	mock *MockTCPClient
}

// NewMockTCPClient creates a new mock instance.
func NewMockTCPClient(ctrl *gomock.Controller) *MockTCPClient {
	mock := &MockTCPClient{ctrl: ctrl}
	mock.recorder = &MockTCPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPClient) EXPECT() *MockTCPClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTCPClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTCPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTCPClient)(nil).Close))
}

// Dial mocks base method.
func (m *MockTCPClient) Dial(address string, port uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", address, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dial indicates an expected call of Dial.
func (mr *MockTCPClientMockRecorder) Dial(address, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockTCPClient)(nil).Dial), address, port)
}

// Listen mocks base method.
func (m *MockTCPClient) Listen(port uint, handlers ...func(net.Conn)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{port}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Listen", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockTCPClientMockRecorder) Listen(port interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{port}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockTCPClient)(nil).Listen), varargs...)
}

// Read mocks base method.
func (m *MockTCPClient) Read() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTCPClientMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTCPClient)(nil).Read))
}

// Write mocks base method.
func (m *MockTCPClient) Write(data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTCPClientMockRecorder) Write(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTCPClient)(nil).Write), data)
}
